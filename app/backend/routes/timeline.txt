from fastapi import APIRouter, HTTPException
from typing import List
from models import TimelineEvent, TimelineEventCreate
from server import db

router = APIRouter(prefix="/api/timeline", tags=["timeline"])

@router.get("", response_model=List[TimelineEvent])
async def get_timeline_events():
    events = await db.timeline_events.find().to_list(1000)
    return [TimelineEvent(**event) for event in events]

@router.get("/{event_id}", response_model=TimelineEvent)
async def get_timeline_event(event_id: str):
    event = await db.timeline_events.find_one({"id": event_id})
    if not event:
        raise HTTPException(status_code=404, detail="Timeline event not found")
    return TimelineEvent(**event)

@router.post("", response_model=TimelineEvent)
async def create_timeline_event(event: TimelineEventCreate):
    event_obj = TimelineEvent(**event.dict())
    await db.timeline_events.insert_one(event_obj.dict())
    return event_obj

@router.put("/{event_id}", response_model=TimelineEvent)
async def update_timeline_event(event_id: str, event: TimelineEventCreate):
    existing = await db.timeline_events.find_one({"id": event_id})
    if not existing:
        raise HTTPException(status_code=404, detail="Timeline event not found")
    
    updated_event = TimelineEvent(id=event_id, **event.dict())
    await db.timeline_events.replace_one({"id": event_id}, updated_event.dict())
    return updated_event

@router.delete("/{event_id}")
async def delete_timeline_event(event_id: str):
    result = await db.timeline_events.delete_one({"id": event_id})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Timeline event not found")
    return {"message": "Timeline event deleted successfully"}