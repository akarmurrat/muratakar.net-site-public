from fastapi import APIRouter, HTTPException
from typing import List, Optional
from models import Project, ProjectCreate
from server import db

router = APIRouter(prefix="/api/projects", tags=["projects"])

@router.get("", response_model=List[Project])
async def get_projects(category: Optional[str] = None):
    query = {}
    if category and category != "All":
        query["category"] = category
    
    projects = await db.projects.find(query).to_list(1000)
    return [Project(**project) for project in projects]

@router.get("/{project_id}", response_model=Project)
async def get_project(project_id: str):
    project = await db.projects.find_one({"id": project_id})
    if not project:
        raise HTTPException(status_code=404, detail="Project not found")
    return Project(**project)

@router.post("", response_model=Project)
async def create_project(project: ProjectCreate):
    project_obj = Project(**project.dict())
    await db.projects.insert_one(project_obj.dict())
    return project_obj

@router.put("/{project_id}", response_model=Project)
async def update_project(project_id: str, project: ProjectCreate):
    existing = await db.projects.find_one({"id": project_id})
    if not existing:
        raise HTTPException(status_code=404, detail="Project not found")
    
    updated_project = Project(id=project_id, **project.dict())
    await db.projects.replace_one({"id": project_id}, updated_project.dict())
    return updated_project

@router.delete("/{project_id}")
async def delete_project(project_id: str):
    result = await db.projects.delete_one({"id": project_id})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Project not found")
    return {"message": "Project deleted successfully"}